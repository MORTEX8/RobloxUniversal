-- Enhanced Aimbot with Physics-Based Prediction (No Team/Wall Checks)
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Configuration
local SETTINGS = {
    FOV = 180, -- Targeting radius in pixels
    AimKey = Enum.UserInputType.MouseButton2, -- Right mouse button
    EdgeOffset = 0.1, -- How close to edge (0-1)
    DistanceMultiplier = 0.01, -- 2% higher per 10m
    MinElevation = 0, -- Minimum aim elevation
    MaxElevation = 0.3, -- Maximum aim elevation
    Prediction = true, -- Enable prediction
    BasePrediction = 0.5, -- Base prediction multiplier
    SpeedSensitivity = 0.1, -- How much velocity affects prediction (10%)
    ProjectileSpeed = 1000, -- Added for physics prediction
    ProjectileDrop = 9.8 -- Added for physics prediction (gravity)
}

-- FOV Circle (Follows mouse)
local fovCircle = Drawing.new("Circle")
fovCircle.Color = Color3.new(1, 1, 1)
fovCircle.Thickness = 1
fovCircle.Transparency = 0.7
fovCircle.Filled = false
fovCircle.Radius = SETTINGS.FOV
fovCircle.Visible = true

-- Physics Prediction Functions
local Physics = {}
function Physics.MovementPrediction(Origin, Destination, DestinationVelocity, ProjectileSpeed)
    local Distance = (Destination - Origin).Magnitude
    local TimeToHit = (Distance / ProjectileSpeed)
    local Predicted = Destination + DestinationVelocity * TimeToHit
    local Delta = (Predicted - Origin).Magnitude / ProjectileSpeed
   
    ProjectileSpeed = ProjectileSpeed - 0.013 * ProjectileSpeed ^ 2 * TimeToHit ^ 2
    TimeToHit = TimeToHit + (Delta / ProjectileSpeed)

    local Actual = Destination + DestinationVelocity * TimeToHit
    -- Reduce horizontal prediction by 20%
    local horizontalReduction = 0.8
    Actual = Vector3.new(
        Destination.X + (Actual.X - Destination.X) * horizontalReduction,
        Actual.Y,
        Destination.Z + (Actual.Z - Destination.Z) * horizontalReduction
    )
    return Actual
end

function Physics.Trajectory(Origin, Destination, ProjectileSpeed, ProjectileDrop)
    local Distance = (Destination - Origin).Magnitude
    local TimeToHit = (Distance / ProjectileSpeed)
    local ProperSpeed = ProjectileSpeed - 0.013 * ProjectileSpeed ^ 2 * TimeToHit ^ 2
    TimeToHit = TimeToHit + (Distance / ProperSpeed)
   
    local DropTime = ProjectileDrop * TimeToHit ^ 2
    if tostring(DropTime):find("nan") or (Distance <= 100) then
        return 0
    end
    -- Reduce vertical prediction by 50%
    return DropTime * 0.5
end

-- Enhanced Prediction with Physics
local function getAimPoint(head)
    local root = head.Parent:FindFirstChild("HumanoidRootPart")
    if not root then return head.Position end
    
    -- Base position (head)
    local aimPoint = head.Position
    
    -- Movement-based edge aiming
    local velocity = root.Velocity
    if velocity.Magnitude > 1 then
        local moveDir = velocity.Unit
        local headSize = head.Size.X
        aimPoint = aimPoint + (moveDir * (headSize * SETTINGS.EdgeOffset))
    end
    
    -- Physics-based prediction
    if SETTINGS.Prediction then
        local origin = Camera.CFrame.Position
        local predictedPos = Physics.MovementPrediction(
            origin,
            aimPoint,
            velocity,
            SETTINGS.ProjectileSpeed
        )
        
        -- Apply gravity compensation
        local dropCompensation = Physics.Trajectory(
            origin,
            predictedPos,
            SETTINGS.ProjectileSpeed,
            SETTINGS.ProjectileDrop
        )
        
        aimPoint = predictedPos + Vector3.new(0, dropCompensation, 0)
    end
    
    -- Distance-based elevation
    local distance = (root.Position - Camera.CFrame.Position).Magnitude
    local elevationFactor = math.clamp(
        (distance / 10) * SETTINGS.DistanceMultiplier,
        SETTINGS.MinElevation,
        SETTINGS.MaxElevation
    )
    aimPoint = aimPoint + Vector3.new(0, head.Size.Y * elevationFactor, 0)
    
    return aimPoint
end

-- Find closest target in FOV (now relative to mouse)
local function getTarget()
    local closestDist = SETTINGS.FOV + 1
    local closestHead = nil
    local mousePos = UserInputService:GetMouseLocation()
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            local head = player.Character:FindFirstChild("Head")
            
            if head and (not humanoid or humanoid.Health > 0) then
                local screenPos = Camera:WorldToViewportPoint(head.Position)
                if screenPos.Z > 0 then -- No wall check
                    local targetPos = Vector2.new(screenPos.X, screenPos.Y)
                    local dist = (mousePos - targetPos).Magnitude
                    
                    if dist <= SETTINGS.FOV and dist < closestDist then
                        closestDist = dist
                        closestHead = head
                    end
                end
            end
        end
    end
    
    return closestHead
end

-- Main loop
local renderSteppedConnection
local characterAddedConnection
local currentTarget = nil -- Track locked target for sticky aim

local function initialize()
    -- Disconnect existing connections if they exist
    if renderSteppedConnection then
        renderSteppedConnection:Disconnect()
    end
    
    renderSteppedConnection = RunService.RenderStepped:Connect(function()
        -- Update FOV circle to follow mouse
        local mousePos = UserInputService:GetMouseLocation()
        fovCircle.Position = mousePos
        
        -- Reset target if right mouse is released
        if not UserInputService:IsMouseButtonPressed(SETTINGS.AimKey) then
            currentTarget = nil
        end
        
        -- Aim when holding right mouse button
        if UserInputService:IsMouseButtonPressed(SETTINGS.AimKey) then
            local target = nil
            
            -- If we have a locked target, check if it's still alive
            if currentTarget then
                local character = currentTarget.Parent
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                local head = currentTarget
                
                if humanoid and humanoid.Health > 0 then
                    target = currentTarget
                else
                    currentTarget = nil -- Reset if target is dead
                end
            end
            
            -- If no locked target (or it's invalid), find a new one
            if not target then
                target = getTarget()
                currentTarget = target -- Lock onto new target
            end
            
            -- Aim at the target
            if target then
                local aimPoint = getAimPoint(target)
                local screenPoint = Camera:WorldToViewportPoint(aimPoint)
                if screenPoint.Z > 0 then
                    local targetPos = Vector2.new(screenPoint.X, screenPoint.Y)
                    local currentPos = UserInputService:GetMouseLocation()
                    local moveX = targetPos.X - currentPos.X
                    local moveY = targetPos.Y - currentPos.Y
                    
                    -- Move the actual mouse
                    mousemoverel(moveX, moveY)
                end
            end
        end
    end)
end

-- Initialize when character is added (including respawn)
characterAddedConnection = LocalPlayer.CharacterAdded:Connect(function()
    initialize()
end)

-- Initial setup
initialize()

print(string.format("Enhanced Aimbot Active | FOV: %d | Sticky Aim: ON", SETTINGS.FOV))
